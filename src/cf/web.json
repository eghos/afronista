{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Pool of web instances in the private subnet, connected by an ELB with associated DNS entries",

    "Parameters" : {
        "EnvironmentName" : {
            "Type" : "String",
            "Description" : "Environment name for this stack (e.g. WIP, DEMO, LIVE, TEST)."
        },

        "ProjectName" : {
            "Type" : "String",
            "Description" : "Project name which is prefixed to names and tags throughout"
        },

        "RepositoryName" : {
            "Type" : "String",
            "Description" : "Repository name which is prefixed to names and tags throughout"
        },

        "VpcId" : {
            "Type" : "String",
            "Description" : "Id of the VPC to place resources in",
            "AllowedPattern" : "vpc-[0-9a-f]{8}",
            "ConstraintDescription" : "must be a valid vpc-XXXXXXX id"
        },

        "KeyInternal" : {
            "Description" : "Internal key to use with the instances in the Stack",
            "Type" : "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[-_ a-zA-Z0-9]*",
            "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "VpcPrivateSubnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "ConstraintDescription" : "must be a list of an existing subnets in the selected Virtual Private Cloud.",
            "Description" : "SubnetIds of private subnets in your Virtual Private Cloud (VPC)"
        },

        "VpcPublicSubnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "ConstraintDescription" : "must be a list of an existing subnets in the selected Virtual Private Cloud.",
            "Description" : "SubnetIds of public subnets in your Virtual Private Cloud (VPC)"
        },

        "VpcPublicCidrA" : {
            "Type" : "String",
            "Description" : "Cidr of AZ A",
            "AllowedPattern" : "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
            "ConstraintDescription" : "must be a valid subnet cidr"
        },

        "VpcPublicCidrB" : {
            "Type" : "String",
            "Description" : "Cidr of AZ B",
            "AllowedPattern" : "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
            "ConstraintDescription" : "must be a valid subnet cidr"
        },

        "VpcPublicCidrC" : {
            "Type" : "String",
            "Description" : "Cidr of AZ C",
            "AllowedPattern" : "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}",
            "ConstraintDescription" : "must be a valid subnet cidr"
        },

        "ElbEndpoint" : {
            "Type" : "String",
            "Description" : "Elb dns name"
        },

        "WebInstanceRole" : {
            "Type" : "String",
            "Description" : "Role Id to assign to the web instances"
        },

        "WebInstanceIam" : {
            "Type" : "String",
            "Description" : "IAM role for web instance"
        },

        "WebPoolMin" : {
            "Type" : "Number",
            "Description" : "Minimum number of servers in web instance pool"
        },

        "WebPoolMax" : {
            "Type" : "Number",
            "Description" : "Maximum number of instances in web pool"
        },

        "WebPoolInit" : {
            "Type" : "Number",
            "Description" : "Initial number of instances in web pool"
        },

        "WebInstanceType" : {
            "Type" : "String",
            "Description" : "Web instance type"
        },

        "WebInstanceAmi" : {
            "Type" : "String",
            "Description" : "Web AMI id"
        },

        "SnsTopicLifecyclehook" : {
            "Type" : "String",
            "Description" : "SNS topic to publish lifecycle hooks details"
        }
    },

    "Resources" : {
        "WebInstanceGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
                "VPCZoneIdentifier" : { "Ref" : "VpcPrivateSubnets" },
                "LaunchConfigurationName" : { "Ref" : "WebLaunchConfig" },
                "MinSize" : { "Ref" : "WebPoolMin" },
                "MaxSize" : { "Ref" : "WebPoolMax" },
                "DesiredCapacity" : { "Ref" : "WebPoolInit" },
                "LoadBalancerNames" : [
                    { "Ref" : "ElasticLoadBalancer0" }
                ],
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": "10",
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName"}, "PropagateAtLaunch" : "true" },
                    { "Key" : "AccessVia", "Value" : "NAT", "PropagateAtLaunch" : "true" },
                    { "Key" : "Name", "Value" : { "Fn::Join" : [ "_", [ { "Ref" : "EnvironmentName" }, { "Ref" : "ProjectName" }, { "Ref" : "RepositoryName" }, "WEB" ] ] }, "PropagateAtLaunch" : "true" },
                    { "Key" : "Stack", "Value" : { "Fn::Join" : [ "_", [ { "Ref" : "EnvironmentName" }, { "Ref" : "ProjectName" }, { "Ref" : "RepositoryName" } ] ] }, "PropagateAtLaunch" : "true" },
                    { "Key" : "Charge", "Value" : { "Fn::Join" : [ "_", [ "website", { "Ref" : "ProjectName" } ] ] }, "PropagateAtLaunch" : "true" }
                ]
            }
        },

        "WebLaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "InstanceType" : { "Ref" : "WebInstanceType" },
                "ImageId" : { "Ref" : "WebInstanceAmi" },
                "SecurityGroups" : [{ "Ref" : "WebSecurityGroup" }],
                "KeyName" : { "Ref" : "KeyInternal" },
                "IamInstanceProfile" : { "Ref" : "WebInstanceProfile" },
                "BlockDeviceMappings" : [{
                    "DeviceName" : "/dev/xvda",
                    "Ebs" : {
                        "VolumeSize" : "40",
                        "VolumeType" : "gp2",
                        "DeleteOnTermination" : "true"
                    }
                }],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1", "\n",
                    "/usr/local/bin/cook webscale", "\n",
                    "/usr/local/bin/cook switch", "\n",
                    "/usr/local/bin/lifecyclehooks.sh", "\n",
                    "/usr/local/bin/cook monitoring", "\n",
                    ""
                ]]}}
            }
        },

        "LifecycleHook": {
            "Type": "AWS::AutoScaling::LifecycleHook",
            "Properties": {
                "AutoScalingGroupName" : { "Ref" : "WebInstanceGroup" },
                "LifecycleTransition" : "autoscaling:EC2_INSTANCE_LAUNCHING",
                "DefaultResult" : "ABANDON",
                "HeartbeatTimeout": "900",
                "NotificationTargetARN" : { "Ref" : "SnsTopicLifecyclehook" },
                "RoleARN" : { "Fn::Join" : [ "/", [ { "Ref" : "WebInstanceIam" }, { "Ref" : "WebInstanceRole" } ] ] }
            }
        },

        "WebInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "WebInstanceRole"
                } ]
            }
        },

        "WebSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable internal HTTP access to the web instances",
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref"  : "LoadBalancerSecurityGroup0" } },
                    { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "VpcPublicCidrA" } },
                    { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "VpcPublicCidrB" } },
                    { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "VpcPublicCidrC" } }
                ],
                "SecurityGroupEgress" : [
                    { "IpProtocol" : "-1", "CidrIp" : "0.0.0.0/0"}
                ]
            }
        },

        "ElasticLoadBalancer0" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "CrossZone" : "true",
                "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup0" } ],
                "Subnets" : { "Ref" : "VpcPublicSubnets" },
                "Scheme" : "internal",
                "ConnectionDrainingPolicy" : {
                    "Enabled" : "true",
                    "Timeout" : "30"
                },
                "Listeners" : [
                    {
                        "Protocol" : "TCP",
                        "LoadBalancerPort" : "80",
                        "InstanceProtocol" : "TCP",
                        "InstancePort" : "80"
                    }
                ],
                "HealthCheck" : {
                    "Target" : "HTTP:80/REVISION",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "4",
                    "Interval" : "30",
                    "Timeout" : "10"
                },
                "Tags" : [
                    { "Key" : "Charge", "Value" : { "Fn::Join" : [ "_", [ "website", { "Ref" : "ProjectName" } ] ] } }
                ]
            }
        },

        "ElbDnsRecord": {
            "Type" : "AWS::Route53::RecordSet",
            "Properties" : {
                "HostedZoneName" : "operations.kg.",
                "Comment" : "CNAME record for cache",
                "Name" : { "Fn::Join" : [ ".", [ { "Ref" : "ElbEndpoint" }, "" ] ] },
                "Type" : "CNAME",
                "TTL" : "10",
                "ResourceRecords" : [{ "Fn::GetAtt" : [ "ElasticLoadBalancer0", "DNSName" ] }]
            }
        },

        "LoadBalancerSecurityGroup0" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable access via the load balancer",
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.3.7.0/24" },
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.48.4.0/24" },
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.40.9.0/24" },
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "10.99.0.0/16" }
                ],
                "SecurityGroupEgress" : [
                    { "IpProtocol" : "-1", "CidrIp" : "0.0.0.0/0"}
                ]
            }
        },

        "WebServerScaleUpPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "WebInstanceGroup" },
                "PolicyType" : "StepScaling",
                "EstimatedInstanceWarmup": "180",
                "MetricAggregationType" : "Average",
                "StepAdjustments": [
                    {
                        "MetricIntervalLowerBound": "0",
                        "MetricIntervalUpperBound" : "20",
                        "ScalingAdjustment": "1"
                    },
                    {
                        "MetricIntervalLowerBound": "20",
                        "MetricIntervalUpperBound" : "40",
                        "ScalingAdjustment": "2"
                    },
                    {
                        "MetricIntervalLowerBound": "40",
                        "ScalingAdjustment": "3"
                    }
                ]
            }
        },

        "WebServerScaleDownPolicy" : {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties" : {
                "AdjustmentType" : "ChangeInCapacity",
                "AutoScalingGroupName" : { "Ref" : "WebInstanceGroup" },
                "ScalingAdjustment" : "-1"
            }
        },

        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU usage is high",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "2",
                "Threshold": "40",
                "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "WebInstanceGroup" }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },

        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU usage is low",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "20",
                "Threshold": "20",
                "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": { "Ref": "WebInstanceGroup" }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        }
    },

    "Outputs" : {
        "WebInstanceGroup" : {
            "Value" : { "Ref" : "WebInstanceGroup" },
            "Description" : "Autoscaling group name"
        },

        "SnsTopicLifecyclehook" : {
            "Value" : { "Ref" : "SnsTopicLifecyclehook" },
            "Description" : "SNS topic used for lifecycle hooks notifications"
        },

        "LifecycleHook" : {
            "Value" : { "Ref" : "LifecycleHook" },
            "Description" : "Lifecycle hook name"

        }
    }

}
